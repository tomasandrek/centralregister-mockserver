openapi: 3.0.0

info:
  title: Energy Performance of Buildings Register API
  description: Public API for EPBR integrations
  version: 1.0.0-rc4

servers:
  - url: 'https://api.epb-integration.digital.communities.gov.uk/'
    description: Integration Service
  - url: 'https://api.epb-staging.digital.communities.gov.uk/'
    description: Staging Service
  - url: 'https://api.epb.digital.communities.gov.uk/'
    description: Production Service

tags:
  - name: Search
    description: Search the register given filtering data
  - name: Manage Assessors
    description: Manage assessors for a given Scheme
  - name: Manage Assessments
    description: 'Manage EPCs, DECs, RRs and ACIRs'
  - name: Manage Addresses
    description: Manage addresses in the register
  - name: Manage Schemes
    description: Operations for managing schemes in the register
  - name: Migration
    description: Endpoints used to migrate information from the legacy system
  - name: Green Deal
    description: Endpoints used by the Green Deal register integration, including Renewable Heat Initiative

paths:
  /schemes:
    get:
      tags:
        - Manage Schemes
      summary: Get a list of all energy assessment schemes in the register
      operationId: mockedData.schemes__get
      security:
        - oauth:
            - 'scheme:list'
      responses:
        '403':
          description: Forbidden
        '200':
          description: List of all schemes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      schemes:
                        type: array
                        items:
                          $ref: '#/components/schemas/Scheme'
      parameters: []
    post:
      tags:
        - Manage Schemes
      summary: Add a new energy assessment scheme to the register
      operationId: mockedData.schemes__post
      security:
        - oauth:
            - 'scheme:create'
      requestBody:
        description: The scheme to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemeBody'
      responses:
        '201':
          description: Scheme succesfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Scheme'
        '403':
          description: Forbidden
        '409':
          description: Scheme already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: SCHEME_ALREADY_EXISTS
                        title:
                          type: string
                          example: >-
                            A scheme with this name already exists in the
                            register

  '/schemes/{schemeId}/assessors':
    get:
      tags:
        - Manage Assessors
      summary: List a summary of assessors belonging to a scheme
      operationId: mockedData.schemes_x_assessors__get
      security:
        - oauth:
            - 'scheme:assessor:list'
      parameters:
        - in: path
          required: true
          name: schemeId
          description: ID of the scheme
          schema:
            type: integer
      responses:
        '200':
          description: List of assessors for a scheme
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessors:
                        type: array
                        items:
                          $ref: '#/components/schemas/AssessorBody'
        '404':
          description: Scheme not found
        '403':
          description: Forbidden

  '/schemes/{schemeId}/assessors/{schemeAssessorId}':
    get:
      tags:
        - Manage Assessors
      summary: Get all details for an individual assessor registration
      operationId: mockedData.schemes_x_assessors_x__get
      security:
        - oauth:
            - 'scheme:assessor:fetch'
      parameters:
        - in: path
          required: true
          name: schemeId
          description: ID of the scheme
          schema:
            type: integer
        - in: path
          required: true
          name: schemeAssessorId
          description: The Assessor ID assigned by the scheme
          schema:
            $ref: '#/components/schemas/AssessorSchemeId'
      responses:
        '200':
          description: Assessor found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '404':
          description: Assessor not found
        '403':
          description: Forbidden
    put:
      tags:
        - Manage Assessors
      summary: >-
        Register a new assessor to associate them with your scheme,
        or update details of an assessor already on your scheme.
      operationId: mockedData.schemes_x_assessors_x__put
      security:
        - oauth:
            - 'scheme:assessor:update'
      parameters:
        - in: path
          name: schemeId
          required: true
          description: ID of the registering scheme
          schema:
            type: integer
        - in: path
          name: schemeAssessorId
          required: true
          description: Assessor ID assigned by the registering scheme
          schema:
            type: string
            format: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessorBody'
      responses:
        '200':
          description: Existing assessor updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '201':
          description: New assessor succesfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '400':
          description: Problem with assessor registration record
        '403':
          description: Forbidden
        '409':
          description: Assessor already exists on a different scheme

  /assessors:
    get:
      tags:
        - Search
        - Manage Assessors
      summary: Search for an assessor by postcode or name
      operationId: mockedData.assessors__get
      security:
        - oauth:
            - 'assessor:search'
      parameters:
        - in: query
          name: postcode
          description: A postcode to search from for an assessor
          schema:
            $ref: '#/components/schemas/AddressPostcode'
        - in: query
          name: name
          description: The name of the assessor
          schema:
            $ref: '#/components/schemas/AssessorFullName'
        - in: query
          name: qualification
          description: Only show assessors who have this qualification
          schema:
            $ref: '#/components/schemas/AssessorQualificationSearchOptions'
      responses:
        '200':
          description: List of assessors matching the search criteria
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AssessorSearchResults'
                  - $ref: '#/components/schemas/AssessorSearchByPostcodeResults'
        '400':
          description: Invalid query
        '403':
          description: Forbidden

  /search/addresses:
    get:
      tags:
        - Search
        - Manage Addresses
      summary: 'Search for an address by (optional) type and
        EITHER:
        - a postcode (with optional building name or number)
        OR
        - a street AND town
        OR
        - a building reference number (UPRN or RRN)'
      operationId: mockedData.search_addresses__get
      security:
        - oauth:
            - 'address:search'
      parameters:
        - in: query
          name: postcode
          description: The postcode of the address being searched for
          schema:
            $ref: '#/components/schemas/AddressPostcode'
        - in: query
          name: buildingNameNumber
          description: The building name or number being searched for
          example: '47'
          schema:
            type: string
        - in: query
          name: street
          description: The street of the address being searched for
          example: 'High Road'
          schema:
            type: string
        - in: query
          name: town
          description: The city or town of the address being searched for
          example: 'Woking'
          schema:
            $ref: '#/components/schemas/AddressTown'
        - in: query
          name: addressId
          description: A known UPRN or RRN to fetch a single address
          example: 'UPRN-716375734512'
          schema:
            type: string
        - in: query
          name: addressType
          description: Domestic or commercial address
          schema:
            type: string
            enum:
              - DOMESTIC
              - COMMERCIAL
      responses:
        '403':
          description: Forbidden
        '200':
          description: Address search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressSearchResults'

  /assessments:
    post:
      tags:
        - Manage Assessments
      summary: Lodge a new assessment
      operationId: mockedData.assessments_x__post
      description: 'Single endpoint for POSTing all new lodgements.
        It will accept as XML payload:
        * A single <Report> for a domestic RdSAP assessment
        * A single <Report> for a domestic SAP assessment
        * Non-domestic EPC and Recommendation report in a single XML
        payload with two <Report> elements
        * Air Conditioning certificate and AC-report in a single XML
        payload with two <Report> elements
        * A single <Report> for DEC
        * A single <Report> for DEC recommendation report
        * DEC and DEC-RR in a single XML payload with two <Report>
        elements'
      security:
        - oauth:
            - 'assessment:lodge'
      parameters:
        - in: query
          name: override
          schema:
            type: boolean
          example: true
          description: 'Only set to true after assessor has manually confirmed
            desire to override lodgement rules. This action will be
            logged.'
      requestBody:
        content:
          application/xml+RdSAP-Schema-19.0:
            schema:
              $ref: '#/components/schemas/Empty'
          application/xml+SAP-Schema-17.1:
            schema:
              $ref: '#/components/schemas/Empty'
          application/xml+RdSAP-Schema-NI-19.0:
            schema:
              $ref: '#/components/schemas/Empty'
          application/xml+SAP-Schema-NI-17.4:
            schema:
              $ref: '#/components/schemas/Empty'
          application/xml+CEPC-7.1:
            schema:
              $ref: '#/components/schemas/Empty'
          application/xml+CEPC-NI-7.1:
            schema:
              $ref: '#/components/schemas/Empty'
      responses:
        '201':
          description: New assessment(s) successfully lodged
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessments:
                        type: array
                        items:
                          type: string
                          properties:
                            assessmentId:
                              $ref: '#/components/schemas/AssessmentId'
                        example:
                          [
                            '9876-9876-9876-9876-9876',
                            '8765-8765-8765-8765-8765',
                          ]
                  meta:
                    type: object
                    properties:
                      links:
                        type: object
                        properties:
                          assessments:
                            type: array
                            items:
                              type: string
                            example:
                              [
                                '/api/assessments/9876-9876-9876-9876-9876',
                                '/api/assessments/8765-8765-8765-8765-8765',
                              ]
        '400':
          description: Bad request - assessment violates lodgement rules. Re-POST to the override link to lodge anyway.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          example: 'FLOOR_AREA_LESS_THAN_ZERO'
                        errorDescription:
                          type: string
                          example: 'Floor-Area must be greater than zero'
                  meta:
                    type: object
                    properties:
                      links:
                        type: object
                        properties:
                          override:
                            type: string
                            example: '/assessments?override=true'
        '409':
          description: Assessment with that assessmentId already exists - retry with different RRN
        '403':
          description: Forbidden
        '500':
          description: Server error

  '/assessments/{assessmentId}':
    get:
      tags:
        - Manage Assessments
      summary: Get an Energy Performance Assessment
      operationId: mockedData.assessments_x__get
      security:
        - oauth:
            - 'assessment:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        '200':
          description: Energy Performance Assessment
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Empty'
            application/xml:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Empty'
        '403':
          description: Forbidden
        '404':
          description: Assessment not found
        '500':
          description: Server error

    put:
      tags:
        - Migration
      summary: Migrate an existing Energy Performance Assessment to the register
      operationId: mockedData.assessments_x__put
      security:
        - oauth:
            - 'migrate:assessment'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: The ID of the assessment being added
          schema:
            $ref: '#/components/schemas/AssessmentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      responses:
        '200':
          description: Assessment added / replaced
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DomesticEnergyAssessmentWithBand'
                type: object
                properties:
                  addressLine1:
                    type: string
                    example: 2 Marsham Street
                  addressLine2:
                    type: string
                    example: ''
                  addressLine3:
                    type: string
                    example: ''
                  addressLine4:
                    type: string
                    example: ''
                  town:
                    type: string
                    example: London
                  assessor:
                    $ref: '#/components/schemas/AssessorSummary'
                  heatDemand:
                    type: object
                    properties:
                      currentSpaceHeatingDemand:
                        type: integer
                        example: 4564
                      currentWaterHeatingDemand:
                        type: integer
                        example: 3253
                      impactOfLoftInsulation:
                        type: integer
                        example: -453
                      impactOfCavityInsulation:
                        type: integer
                        example: -84
                      impactOfSolidWallInsulation:
                        type: integer
                        example: -21
        '400':
          description: Bad request
        '403':
          description: Forbidden
        '500':
          description: Server error

  /assessments/{assessmentId}/status:
    post:
      tags:
        - Manage Assessments
      summary: Update the status of an assessment
      operationId: mockedData.assessments_x_status__post
      security:
        - oauth:
            - 'assessment:lodge'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being added, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/AssessmentStatus'
      responses:
        '200':
          description: Assessment report status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      status:
                    $ref: '#/components/schemas/AssessmentStatus'
        '400':
          description: Bad request - assessmentId parameter was badly formatted
        '403':
          description: Forbidden - the assessment with that assessmentId does not belong to your scheme
        '404':
          description: Assessment with that assessmentId not found
        '500':
          description: Server error

  /reports/assessors/status:
    get:
      tags:
        - Manage Assessors
        - Reports
      summary: >-
        Report of assessors who were suspended and struck off on a particular
        day
      operationId: mockedData.reports_assessors_status__get
      security:
        - oauth:
            - 'report:assessor:status'
      parameters:
        - in: query
          name: reportDate
          required: true
          description: The date of the report
          schema:
            type: string
            format: date
            example: '2020-01-30'
      responses:
        '200':
          description: Report returned succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessorStatusEvents:
                        type: array
                        items:
                          $ref: '#/components/schemas/AssessorQualificationChangeEvent'
        '404':
          description: 'Report not found, likely because the date is in the future'
        '403':
          description: Forbidden

  '/migrations/assessors/{schemeAssessorId}':
    put:
      tags:
        - Migration
      summary: Migrate an assessor from the legacy database
      operationId: mockedData.migrations_assessors_x__put
      security:
        - oauth:
            - 'migrate:assessor'
      parameters:
        - in: path
          name: schemeAssessorId
          required: true
          description: Assessor ID assigned by the registering scheme
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessorBody'
      responses:
        '200':
          description: Existing assessor updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '201':
          description: New assessor succesfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '400':
          description: Problem with assessor registration record
        '403':
          description: Forbidden
        '409':
          description: Assessor already exists on a different scheme

  '/migrations/addresses/{addressId}':
    put:
      tags:
        - Migration
      summary: Migrate an address from AddressBase or another source of addresses
      operationId: mockedData.migrations_addresses_x__put
      security:
        - oauth:
            - 'migrate:address'
      parameters:
        - in: path
          name: addressId
          required: true
          description: The unique identifier of the address being added
          schema:
            $ref: '#/components/schemas/AddressId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressBody'
      responses:
        '200':
          description: Address updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddressBody'
        '201':
          description: Address added
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddressBody'
        '400':
          description: Bad request
        '403':
          description: Forbidden
        '500':
          description: Server error

  '/greendeal/assessments/{assessmentId}':
    get:
      tags:
        - Green Deal
      summary: 'Get the Green Deal details from the assessment with reference
        {assessmentId}'
      operationId: mockedData.greendeal_assessments_x__get
      security:
        - oauth:
            - 'greendeal:assessment:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        '200':
          description: Green Deal Energy Performance data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessment:
                        $ref: '#/components/schemas/AssessmentGreenDealDetails'
        '400':
          description: The assessmentId parameter is badly formatted
        '403':
          description: Forbidden
        '404':
          description: Assessment not found
        '410':
          description: Gone - Assessment with ID assessmentId exists but has been cancelled/marked not for issue
        '500':
          description: Server error

  '/greendeal/rhi/assessments/{assessmentId}/latest':
    get:
      tags:
        - Green Deal
      summary: 'Get the RHI details of the most recent Energy Performance
        Assessment for the address of the assessment with reference
        {assessmentId}'
      operationId: mockedData.greendeal_rhi_assessments_x_latest__get
      security:
        - oauth:
            - 'greendeal:assessment:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        '200':
          description: RHI Energy Performance data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessment:
                        $ref: '#/components/schemas/AssessmentRHIDetails'
        '400':
          description: The assessmentId parameter is badly formatted
        '403':
          description: Forbidden
        '404':
          description: Assessment with this ID not found
        '410':
          description: Assessment with this ID exists but has been CANCELLED
        '500':
          description: Server error

  '/greendeal/disclosure/assessments/{assessmentId}/plans':
    post:
      tags:
        - Green Deal
      summary: 'Disclose new live Green Deal plan to appear on EPC with RRN
        {assessmentId}'
      operationId: mockedData.greendeal_disclosure_assessments_x_plans__put
      security:
        - oauth:
            - 'greendeal:disclosure:update'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      requestBody:
        description: Green Deal disclosure data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GreenDealPlan'
      responses:
        '201':
          description: Green Deal disclosure successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GreenDealPlan'
        '400':
          description: Problem with Green Deal record request
        '403':
          description: Forbidden
        '404':
          description: Energy assessment with RRN assessmentId can not be found
        '409':
          description: Plan with the submitted ID already exists
        '500':
          description: Server error

  '/greendeal/disclosure/plans/{planId}':
    put:
      tags:
        - Green Deal
      summary: 'Update an existing Green Deal plan'
      operationId: mockedData.greendeal_disclosure_plans_x__put
      security:
        - oauth:
            - 'greendeal:disclosure:update'
      parameters:
        - in: path
          name: planId
          required: true
          description: 'The ID of the plan being updated'
          schema:
            $ref: '#/components/schemas/GreenDealPlanId'
      requestBody:
        description: Green Deal disclosure data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GreenDealPlan'
      responses:
        '200':
          description: Green Deal disclosure successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GreenDealPlan'
        '400':
          description: Problem with Green Deal record request
        '403':
          description: Forbidden
        '404':
          description: Green Deal plan with ID planId can not be found
        '409':
          description: Plan is not active or Identifier in request body doesn't match the planId in the URL
        '500':
          description: Server error
    delete:
      tags:
        - Green Deal
      summary: 'Delete an existing Green Deal plan'
      operationId: mockedData.greendeal_disclosure_plans_x__delete
      security:
        - oauth:
            - 'greendeal:disclosure:update'
      parameters:
        - in: path
          name: planId
          required: true
          description: 'The ID of the plan being deleted'
          schema:
            $ref: '#/components/schemas/GreenDealPlanId'
      responses:
        '204':
          description: Green Deal disclosure successfully deleted
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Green Deal plan with ID planId can not be found
        '500':
          description: Server error

components:
  securitySchemes:
    oauth:
      type: oauth2
      description: This API uses OAuth 2 with the client credentials grant flow
      x-tokenInfoFunc: app.token_info
      flows:
        clientCredentials:
          tokenUrl: /auth/oauth/token
          scopes:
            'scheme:create': Create a new scheme on the register
            'scheme:list': List schemes on the register
            'scheme:assessor:list': List assessors
            'scheme:assessor:update': Add or Update assessors
            'scheme:assessor:fetch': Get full details of an individual assessor
            'assessment:fetch': Get full details of an individual assessment
            'assessment:lodge': Lodge a new assessment with the register
            'assessment:search': Search the register for an assessment
            'assessor:search': Search the register for an assessor
            'address:search': List addresses that match a given search criteria, along with existing assessments
            'migrate:assessment': Migrate an assessment to the register
            'migrate:assessor': Migrate an assessor to the register
            'migrate:address': Migrate an address to the register
            'report:assessor:status': Get a report of changes to assessors status for a given date
            'greendeal:assessment:fetch': Get limited details (RHI required fields) of an individual assessment
            'greendeal:disclosure:update': Submit or update details of a Green Deal Plan

  schemas:
    # Addresses
    Address:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/AddressSource'
        line1:
          $ref: '#/components/schemas/AddressLine1'
        line2:
          type: string
          example: ''
        line3:
          type: string
          example: ''
        line4:
          type: string
          example: ''
        town:
          $ref: '#/components/schemas/AddressTown'
        postcode:
          $ref: '#/components/schemas/AddressPostcode'

    AddressBody:
      $ref: '#/components/schemas/Address'

    AddressDetail:
      allOf:
        - $ref: '#/components/schemas/Address'
        - type: object
          properties:
            addressId:
              $ref: '#/components/schemas/AddressId'
            existingAssessments:
              type: array
              items:
                type: object
                properties:
                  assessmentId:
                    $ref: '#/components/schemas/AssessmentId'
                  assessmentStatus:
                    $ref: '#/components/schemas/AssessmentStatus'
                  assessmentType:
                    $ref: '#/components/schemas/AssessmentType'

    AddressId:
      type: string
      example: 'UPRN-716375734512'

    AddressLine1:
      type: string
      example: 2 Marsham Street

    AddressTown:
      type: string
      example: London

    AddressPostcode:
      type: string
      example: SW1P 4JA

    AddressSource:
      type: string
      enum:
        - GAZETTEER
        - PREVIOUS_ASSESSMENT
      example: GAZETTEER

    AddressSearchResults:
      type: object
      properties:
        data:
          type: object
          properties:
            addresses:
              type: array
              items:
                $ref: '#/components/schemas/AddressDetail'
        meta:
          type: object
          properties:
            filters:
              type: object
              description: >-
                The filters object will contain the search parameters provided
                in the initial request.

    # Assessors
    Assessor:
      type: object
      properties:
        firstName:
          type: string
          example: Jo
        lastName:
          type: string
          example: Bloggs
        middleNames:
          type: string
          example: T
        contactDetails:
          type: object
          properties:
            telephoneNumber:
              type: string
              maxLength: 256
              example: 01632 960375
            email:
              type: string
              format: email
              example: j.t.bloggs@example.com
        qualifications:
          $ref: '#/components/schemas/AssessorQualifications'
        alsoKnownAs:
          type: string
          example: Jo

    AssessorBody:
      allOf:
        - $ref: '#/components/schemas/Assessor'
        - type: object
          properties:
            dateOfBirth:
              type: string
              format: date
              example: '1980-01-10'
            searchResultsComparisonPostcode:
              $ref: '#/components/schemas/AddressPostcode'
            address:
              $ref: '#/components/schemas/AssessorAddress'
            companyDetails:
              $ref: '#/components/schemas/CompanyDetails'

    AssessorDetail:
      allOf:
        - $ref: '#/components/schemas/Assessor'
        - type: object
          properties:
            assessorSchemeId:
              $ref: '#/components/schemas/AssessorSchemeId'
            registeredBy:
              $ref: '#/components/schemas/Scheme'

    AssessorSearchResults:
      type: object
      properties:
        data:
          type: object
          properties:
            assessors:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/AssessorDetail'

    AssessorSearchByPostcodeResults:
      allOf:
        - $ref: '#/components/schemas/AssessorSearchResults'
        - type: object
          properties:
            data:
              type: object
              properties:
                assessors:
                  type: array
                  items:
                    type: object
                    properties:
                      distanceFromPostcodeInMiles:
                        type: number
                        example: 0.2

    AssessorSchemeId:
      type: string
      example: TEST000001

    AssessorSummary:
      allOf:
        - $ref: '#/components/schemas/Assessor'
        - type: object
          properties:
            dateOfBirth:
              type: string
              format: date
              example: '1980-01-10'
            registeredBy:
              $ref: '#/components/schemas/Scheme'
            schemeAssessorId:
              $ref: '#/components/schemas/AssessorSchemeId'
            searchResultsComparisonPostcode:
              $ref: '#/components/schemas/AddressPostcode'

    AssessorAddress:
      type: object
      properties:
        addressLine1:
          $ref: '#/components/schemas/AddressLine1'
        addressLine2:
          type: string
          example: ''
        addressLine3:
          type: string
          example: ''
        addressLine4:
          type: string
          example: ''
        town:
          $ref: '#/components/schemas/AddressTown'
        postcode:
          $ref: '#/components/schemas/AddressPostcode'

    CompanyDetails:
      type: object
      properties:
        companyRegNo:
          type: string
          example: ''
        companyAddressLine1:
          $ref: '#/components/schemas/AddressLine1'
        companyAddressLine2:
          type: string
          example: ''
        companyAddressLine3:
          type: string
          example: ''
        companyTown:
          $ref: '#/components/schemas/AddressTown'
        companyPostcode:
          $ref: '#/components/schemas/AddressPostcode'
        companyWebsite:
          type: string
          example: ''
        companyTelephoneNumber:
          type: string
          example: ''
        companyEmail:
          type: string
          example: ''
        companyName:
          type: string
          example: ''

    AssessorQualifications:
      type: object
      properties:
        domesticRdSap:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        domesticSap:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticDec:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticNos3:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticNos4:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticNos5:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticSp3:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticCc4:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        gda:
          $ref: '#/components/schemas/AssessorQualificationStatus'

    AssessorQualificationSearchOptions:
      type: string
      enum:
        - domesticRdSap
        - domesticSap
        - nonDomesticDec
        - nonDomesticNos3
        - nonDomesticNos4
        - nonDomesticNos5
        - nonDomesticSp3
        - nonDomesticCc4
        - gda

    AssessorQualificationStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - STRUCKOFF
        - SUSPENDED
      example: ACTIVE

    AssessorQualificationChangeEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/AssessorDetail'
      properties:
        qualificationChange:
          type: object
          properties:
            qualificationType:
              type: string
              example: domesticEnergyPerformanceCertificates
            previousStatus:
              $ref: '#/components/schemas/AssessorQualificationStatus'
            newStatus:
              allOf:
                - $ref: '#/components/schemas/AssessorQualificationStatus'
                - example: 'STRUCKOFF'

    AssessorFullName:
      type: string
      example: Jo Bloggs

    # Assessments
    AssessmentId:
      type: string
      example: 0000-0000-0000-0000-0000

    AssessmentStatus:
      type: string
      example: CANCELLED
      enum:
        - ENTERED
        - EXPIRED
        - CANCELLED
        - NOT_FOR_ISSUE

    AssessmentType:
      type: string
      example: domestic-epc
      enum:
        - domestic-epc
        - non-domestic-epc
        - recommendation-report
        - dec
        - dec-recommendation-report
        - ac-report
        - ac-cert

    DomesticEnergyAssessmentWithBand:
      allOf:
        - $ref: '#/components/schemas/EnergyAssessmentBasicInfo'
      properties:
        currentEnergyEfficiencyBand:
          type: string
          example: 'a'
          description: The band, from a to g, the current Energy Rating falls within
        potentialEnergyEfficiencyBand:
          type: string
          example: 'a'
          description: The band, from a to g, the potential Energy Rating falls within

    EnergyAssessmentBasicInfo:
      type: object
      properties:
        dateOfAssessment:
          type: string
          format: date
          description: The date that the assessor carried out the assessment of the property
        dateRegistered:
          type: string
          format: date
          description: The date that the assessment was submitted to the Register
        totalFloorArea:
          type: number
          example: 120.55
        typeOfAssessment:
          type: string
          enum: [SAP, RdSAP]
        dwellingType:
          type: string
        currentCarbonEmission:
          type: number
          description: The current carbon emission of the property
          example: 4.736
        potentialCarbonEmission:
          type: number
          description: The potential carbon emission of the propety
          example: 2.839
        currentEnergyEfficiencyRating:
          type: integer
          minimum: 1
          maximum: 100
          description: The current energy rating to be submitted to the Register
        potentialEnergyEfficiencyRating:
          type: integer
          minimum: 1
          maximum: 100
          description: The potential energy rating to be submitted, must be equal to or larger than currentEnergyEfficiencyRating
        postcode:
          $ref: '#/components/schemas/AddressPostcode'
        propertySummary:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/PropertySummary'
        recommendedImprovements:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/DomesticRecommendationWithoutCode'
              - $ref: '#/components/schemas/DomesticRecommendationWithCode'
        dateOfExpiry:
          type: string
          format: date
          description: The date that the certificate expires
        schemeAssessorId:
          $ref: '#/components/schemas/AssessorSchemeId'
        heatDemand:
          type: object
          properties:
            currentSpaceHeatingDemand:
              type: number
              example: 456.45
            currentWaterHeatingDemand:
              type: number
              example: 325.33
            impactOfLoftInsulation:
              type: integer
              example: -453
            impactOfCavityInsulation:
              type: integer
              example: -84
            impactOfSolidWallInsulation:
              type: integer
              example: -21

    PropertySummary:
      type: object
      properties:
        name:
          type: string
          example: 'Walls'
          description: 'The name of the feature of the property'
        description:
          type: string
          example: 'Solid brick, as built, no insulation (assumed)'
        energyEfficiencyRating:
          type: number
          example: 2
        environmentalEfficiencyRating:
          type: number
          example: 0

    DomesticRecommendationWithoutCode:
      type: object
      properties:
        sequence:
          type: number
          example: 0
          description: 'The order in which this reccomendation should be shown'
        indicativeCost:
          type: string
          example: '£200 - £4,000'
        typicalSaving:
          type: number
          example: 400.21
        improvementCategory:
          type: string
        improvementType:
          type: string
        improvementTitle:
          type: string
        improvementDescription:
          type: string
        energyPerformanceRating:
          type: string
          description: 'The estimated energy performance rating once the improvement has been carried out'
          example: 'C'
        environmentalImpactRating:
          type: string
          description: 'The estimated environmental impact rating once the improvement has been carried out'
        greenDealCategoryCode:
          type: string

    DomesticRecommendationWithCode:
      type: object
      properties:
        sequence:
          type: number
          example: 1
          description: 'The order in which this reccomendation should be shown'
        improvementCode:
          type: string
          example: '1'
        indicativeCost:
          type: string
          example: '£200 - £4,000'
        typicalSaving:
          type: number
          example: 400.21
        improvementCategory:
          type: string
        improvementType:
          type: string
        energyPerformanceRating:
          type: string
          description: 'The estimated energy performance rating once the improvement has been carried out'
          example: 'C'
        environmentalImpactRating:
          type: string
          description: 'The estimated environmental impact rating once the improvement has been carried out'
        greenDealCategoryCode:
          type: string

    # Green Deal
    AssessmentGreenDealDetails:
      type: object
      properties:
        typeOfAssessment:
          type: string
          enum: [SAP, RdSAP]
        address:
          $ref: '#/components/schemas/Address'
        addressIdentifiers:
          description:
            'List of address identifiers associated with this assessment - these may include:
            * OS gazetteer UPRNS (prefixed UPRN-)
            * Legacy reference numbers from the old register system (prefixed LPRN-)
            * Reference numbers for reports for this address (prefixed RRN-)'
          type: array
          items:
            $ref: '#/components/schemas/AddressId'
          example:
            [
              'UPRN-716375734512',
              'LPRN-1234567890',
              'RRN-1234-1234-1234-1234-1234',
            ]
        countryCode:
          type: string
          example: 'EAW'
        inspectionDate:
          type: string
          format: date
          example: '2020-02-29'
        lodgementDate:
          type: string
          format: date
          example: '2020-02-29'
        isLatestAssessmentForAddress:
          type: boolean
          example: true
        status:
          $ref: '#/components/schemas/AssessmentStatus'
        mainFuelType:
          type: string
          example: 'Natural Gas'
        secondaryFuelType:
          type: string
          example: 'Grid Supplied Electricity'
        waterHeatingFuel:
          type: string
          example: 'Smokeless Fuel (inc Coke)'

    AssessmentRHIDetails:
      type: object
      properties:
        epcRrn:
          $ref: '#/components/schemas/AssessmentId'
        assessorName:
          $ref: '#/components/schemas/AssessorFullName'
        reportType:
          type: string
          example: 'Energy Performance Certificate'
        inspectionDate:
          type: string
          format: date
          example: '2020-01-30'
        lodgementDate:
          type: string
          format: date
          example: '2020-02-29'
        dwellingType:
          type: string
          example: 'Top-floor flat'
        postcode:
          $ref: '#/components/schemas/AddressPostcode'
        propertyAgeBand:
          type: string
          example: 'D'
        tenure:
          type: string
          example: 'Owner-occupied'
        totalFloorArea:
          type: string
          example: '123.5 square metres'
        cavityWallInsulation:
          type: boolean
          example: false
        loftInsulation:
          type: boolean
          example: true
        spaceHeating:
          type: string
          example: 'Gas-fired central heating'
        waterHeating:
          type: string
          example: 'Electrical immersion heater'
        secondaryHeating:
          type: string
          example: 'Electric bar heater'
        energyEfficiency:
          $ref: '#/components/schemas/RHIEnergyEfficiency'

    RHIEnergyEfficiency:
      type: object
      properties:
        currentRating:
          type: number
          example: 64
        currentBand:
          type: string
          example: D
        potentialRating:
          type: number
          example: 75
        potentialBand:
          type: string
          example: C

    GreenDealPlanId:
      description: 'Green Deal plan ID - created by the Central Charge Database
        (GDCC) when the plan is set up'
      type: string
      maxLength: 12
      example: ABC123456DEF

    GreenDealPlan:
      type: object
      properties:
        GreenDealPlanId:
          $ref: '#/components/schemas/GreenDealPlanId'
        startDate:
          description: The date the plan went live
          type: string
          format: date
          example: '2020-01-30'
        endDate:
          description: The date the plan is expected to end
          type: string
          format: date
          example: '2030-02-28'
        providerDetails:
          $ref: '#/components/schemas/GreenDealProvider'
        interest:
          $ref: '#/components/schemas/GreenDealInterest'
        chargeUplift:
          $ref: '#/components/schemas/GreenDealChargeUplift'
        ccaRegulated:
          description: 'Whether the Green Deal plan is regulated under the
            Consumer Credit Act'
          type: boolean
          example: true
        structureChanged:
          description: 'Whether the provider knows or has reasonable cause to
            believe that an alteration has been made to the Green
            Deal property which, had it existed when the estimated
            first year savings were calculated, would have affected
            that calculation materially'
          type: boolean
          example: false
        measuresRemoved:
          description: 'Whether the provider knows or has reasonable cause to
            believe that an improvement installed at the Green Deal
            property under a green deal plan has been removed from
            the property before the end of the improvement-specific
            payment period'
          type: boolean
          example: false
        measures:
          type: array
          items:
            $ref: '#/components/schemas/GreenDealMeasure'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/GreenDealCharge'
        savings:
          type: array
          items:
            $ref: '#/components/schemas/GreenDealSaving'

    GreenDealProvider:
      type: object
      description: Details relating to the provider of the plan
      properties:
        name:
          description: 'Name of the provider organisation responsible for the
            Green Deal plan'
          type: string
          maxLength: 400
          example: 'The Bank'
        telephone:
          description: 'Phone number of the provider organisation responsible
            for the Green Deal plan'
          type: string
          maxLength: 100
          example: '0800 0000000'
        email:
          description: 'Email address of the provider organisation responsible
            for the Green Deal plan'
          type: string
          maxLength: 100
          example: 'lender@example.com'

    GreenDealInterest:
      type: object
      properties:
        rate:
          description: 'The interest rate (APR) on the Green Deal finance taken
            out for the Green Deal plan'
          type: number
          minimum: 0
          maximum: 10000
          example: 12.3
        fixed:
          description: 'Whether the interest rate on the Green Deal plan is
            fixed over the lifetime of the plan'
          type: boolean
          example: true

    GreenDealChargeUplift:
      type: object
      properties:
        amount:
          description: 'The percentage uplift in the Green Deal daily charge,
            where applicable, otherwise zero'
          type: number
          minimum: 0
          maximum: 1000
          example: 1.25
        date:
          description: 'The date when the Green Deal daily charge uplift takes
            effect, where an annual interest uplift is included as a
            term of the Green Deal plan'
          type: string
          format: date
          example: '2025-03-29'

    GreenDealMeasure:
      type: object
      properties:
        sequence:
          type: integer
          example: 0
        measureType:
          description: 'The measure type of the specific measure installed under
            the Green Deal plan'
          type: string
          example: 'Loft insulation'
        product:
          description: 'The product name of the specific measure installed under
            the Green Deal plan'
          type: string
          example: 'WarmHome lagging stuff (TM)'
        repaidDate:
          description: 'Date the measure will be paid off under the Green Deal
            plan payment schedule'
          type: string
          format: date
          example: '2025-03-29'

    GreenDealCharge:
      type: object
      properties:
        sequence:
          type: integer
          example: 0
        startDate:
          description: 'The start date at which the specified daily charge
            starts taking effect'
          type: string
          format: date
          example: '2020-03-29'
        endDate:
          description: 'The end date at which the specified daily charge stops
            taking effect'
          type: string
          format: date
          example: '2030-03-29'
        dailyCharge:
          description: 'The daily amount the customer will be paying through
            their electricity bill'
          type: number
          minimum: 0
          maximum: 10000
          example: '0.34'

    GreenDealSaving:
      type: object
      properties:
        sequence:
          type: integer
          example: 0
        fuelCode:
          description: 'Code which indicates the type of heating fuel'
          type: string
          example: 'LPG'
        fuelSaving:
          description: 'Total kWh saving for the fuel (negative if increase),
            allowing for in-use factors'
          type: number
          minimum: -10000000
          maximum: 10000000
        standingChargeFraction:
          description: 'Fraction of standing charge for the fuel applicable to
            the saving, negative if standing charge applies after
            improvements but not before, positive if standing
            charge applies before improvements but not after,
            zero otherwise'
          type: number
          minimum: -1
          maximum: 1
          example: -0.3

    # Schemes
    Scheme:
      allOf:
        - $ref: '#/components/schemas/SchemeBody'
        - type: object
          properties:
            schemeId:
              type: string
              example: 432

    SchemeBody:
      type: object
      properties:
        name:
          type: string
          example: EPCs 4 U

    Empty:
      type: string

  links: {}
  callbacks: {}
