openapi: 3.0.0

info:
  title: Energy Performance of Buildings Register API
  description: Public API for EPBR integrations
  version: 1.0.0-rc3

servers:
  - url: 'https://api.epb-integration.digital.communities.gov.uk/'
    description: Integration Service
  - url: 'https://api.epb-staging.digital.communities.gov.uk/'
    description: Staging Service
  - url: 'https://api.epb.digital.communities.gov.uk/'
    description: Production Service

tags:
  - name: Search
    description: Search the register given filtering data
  - name: Manage Assessors
    description: Manage assessors for a given Scheme
  - name: Manage Assessments
    description: 'Manage EPCs, DECs and ACIRs'
  - name: Manage Addresses
    description: Manage addresses in the register
  - name: Manage Schemes
    description: Operations for managing schemes in the register
  - name: Migration
    description: Endpoints used to migrate information from the legacy system

paths:
  /schemes:
    get:
      tags:
        - Manage Schemes
      summary: Get a list of all energy assessment schemes in the register
      operationId: mockedData.schemes__get
      security:
        - oauth:
            - 'scheme:list'
      responses:
        '403':
          description: Forbidden
        '200':
          description: List of all schemes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Scheme'
      parameters: []
    post:
      tags:
        - Manage Schemes
      summary: Add a new energy assessment scheme to the register
      operationId: mockedData.schemes__post
      security:
        - oauth:
            - 'scheme:create'
      requestBody:
        description: The scheme to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemeBody'
      responses:
        '201':
          description: Scheme succesfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Scheme'
        '403':
          description: Forbidden
        '409':
          description: Scheme already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: SCHEME_ALREADY_EXISTS
                        title:
                          type: string
                          example: >-
                            A scheme with this name already exists in the
                            register

  '/schemes/{schemeId}/assessors':
    get:
      tags:
        - Manage Assessors
      summary: List a summary of assessors belonging to a scheme
      operationId: mockedData.schemes_x_assessors__get
      security:
        - oauth:
            - 'scheme:assessor:list'
      parameters:
        - in: path
          required: true
          name: schemeId
          description: ID of the scheme
          schema:
            type: integer
      responses:
        '200':
          description: List of assessors for a scheme
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssessorBody'
        '404':
          description: Scheme not found
        '403':
          description: Forbidden

  '/schemes/{schemeId}/assessors/{schemeAssessorId}':
    get:
      tags:
        - Manage Assessors
      summary: Get all details for an individual assessor registration
      operationId: mockedData.schemes_x_assessors_x__get
      security:
        - oauth:
            - 'scheme:assessor:fetch'
      parameters:
        - in: path
          required: true
          name: schemeId
          description: ID of the scheme
          schema:
            type: integer
        - in: path
          required: true
          name: schemeAssessorId
          description: The Assessor ID assigned by the scheme
          schema:
            $ref: '#/components/schemas/AssessorSchemeId'
      responses:
        '200':
          description: Assessor found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '404':
          description: Assessor not found
        '403':
          description: Forbidden
    put:
      tags:
        - Manage Assessors
      summary: >-
        Register a new assessor to associate them with your scheme.
        Alternatively, update an assessor
      operationId: mockedData.schemes_x_assessors_x__put
      security:
        - oauth:
            - 'scheme:assessor:update'
      parameters:
        - in: path
          name: schemeId
          required: true
          description: ID of the registering scheme
          schema:
            type: integer
        - in: path
          name: schemeAssessorId
          required: true
          description: Assessor ID assigned by the registering scheme
          schema:
            type: string
            format: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessorBody'
      responses:
        '200':
          description: Existing assessor updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '201':
          description: New assessor succesfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '400':
          description: Problem with assessor registration record
        '403':
          description: Forbidden
        '409':
          description: Assessor already exists on a different scheme

  /search/assessors:
    get:
      tags:
        - Search
        - Manage Assessors
      summary: Search for an assessor by postcode or name
      operationId: mockedData.search_assessors__get
      security:
        - oauth:
            - 'assessment:search'
      parameters:
        - in: query
          name: postcode
          description: A postcode to search from for an assessor
          schema:
            $ref: '#/components/schemas/AddressPostcode'
        - in: query
          name: name
          description: The name of the assessor
          schema:
            $ref: '#/components/schemas/AssessorFullName'
      responses:
        '200':
          description: List of assessors matching the search criteria
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AssessorSearchResults'
                  - $ref: '#/components/schemas/AssessorSearchByPostcodeResults'
        '400':
          description: Invalid query
        '403':
          description: Forbidden

  /search/addresses:
    get:
      tags:
        - Search
        - Manage Addresses
      summary: Search for an address by type and either a postcode or street and town
      operationId: mockedData.search_addresses__get
      security:
        - oauth:
            - 'address:search'
      parameters:
        - in: query
          name: postcode
          description: The postcode of the address being searched for
          schema:
            $ref: '#/components/schemas/AddressPostcode'
        - in: query
          name: street
          description: The street of the address being searched for
          schema:
            type: string
        - in: query
          name: town
          description: The city or town of the address being searched for
          schema:
            $ref: '#/components/schemas/AddressTown'
        - in: query
          name: addressType
          description: Domestic or commercial address
          schema:
            type: string
            enum:
              - DOMESTIC
              - COMMERCIAL
      responses:
        '403':
          description: Forbidden
        '200':
          description: Address search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressSearchResults'

  '/assessments/{assessmentId}':
    get:
      tags:
        - Manage Assessments
      summary: Get an Energy Performance Assessment
      operationId: mockedData.assessments_x__get
      security:
        - oauth:
            - 'assessment:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        '200':
          description: Energy Performance Assessment
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Empty'
            application/xml:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Empty'
        '403':
          description: Forbidden
        '404':
          description: Assessment not found
        '500':
          description: Server error

  '/assessments/{assessmentType}/{assessmentId}':
    post:
      tags:
        - Manage Assessments
      summary: Lodge a new assessment
      operationId: mockedData.assessments_x_x__post
      security:
        - oauth:
            - 'assessment:lodge'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being added, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
        - in: path
          name: assessmentType
          required: true
          description: 'The ID of the assessment being added, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      responses:
        '201':
          description: New assessment lodged
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Empty'
        '400':
          description: Bad request
        '409':
          description: Assessment with that assessmentId already exists
        '403':
          description: Forbidden
        '500':
          description: Server error

  /reports/assessors/status:
    get:
      tags:
        - Manage Assessors
        - Reports
      summary: >-
        Report of assessors who were suspended and struck off on a particular
        day
      operationId: mockedData.reports_assessors_status__get
      security:
        - oauth:
            - 'report:assessor:status'
      parameters:
        - in: query
          name: reportDate
          required: true
          description: The date of the report
          schema:
            type: string
            format: date
            example: '2020-01-30'
      responses:
        '200':
          description: Report returned succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssessorQualificationChangeEvent'
        '404':
          description: 'Report not found, likely because the date is in the future'
        '403':
          description: Forbidden

  '/migrations/assessors/{schemeAssessorId}':
    put:
      tags:
        - Migration
      summary: Migrate an assessor from the legacy database
      operationId: mockedData.migrations_assessors_x__put
      security:
        - oauth:
            - 'migrate:assessor'
      parameters:
        - in: path
          name: schemeAssessorId
          required: true
          description: Assessor ID assigned by the registering scheme
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessorBody'
      responses:
        '200':
          description: Existing assessor updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '201':
          description: New assessor succesfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '400':
          description: Problem with assessor registration record
        '403':
          description: Forbidden
        '409':
          description: Assessor already exists on a different scheme

  '/migrations/assessments/{assessmentId}':
    put:
      tags:
        - Migration
      summary: Migrate an existing Energy Performance Assessment to the register
      operationId: mockedData.migrations_assessments_x__put
      security:
        - oauth:
            - 'migrate:assessment'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: The ID of the assessment being added
          schema:
            $ref: '#/components/schemas/AssessmentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      responses:
        '200':
          description: Assessment added / replaced
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Empty'
        '201':
          description: New assessment succesfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Empty'
        '400':
          description: Bad request
        '403':
          description: Forbidden
        '500':
          description: Server error

  '/migrations/addresses/{addressId}':
    put:
      tags:
        - Migration
      summary: Migrate an address from AddressBase or another source of addresses
      operationId: mockedData.migrations_addresses_x__put
      security:
        - oauth:
            - 'migrate:address'
      parameters:
        - in: path
          name: addressId
          required: true
          description: The unique identifier of the address being added
          schema:
            $ref: '#/components/schemas/AddressId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressBody'
      responses:
        '200':
          description: Address updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddressBody'
        '201':
          description: Address added
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddressBody'
        '400':
          description: Bad request
        '403':
          description: Forbidden
        '500':
          description: Server error

components:
  securitySchemes:
    oauth:
      type: oauth2
      description: This API uses OAuth 2 with the client credentials grant flow
      x-tokenInfoFunc: app.token_info
      flows:
        clientCredentials:
          tokenUrl: /auth/token
          scopes:
            'scheme:create': Create a new scheme on the register
            'scheme:list': List schemes on the register
            'scheme:assessor:list': List assessors
            'scheme:assessor:update': Add or Update assessors
            'scheme:assessor:fetch': Get full details of an individual assessor
            'assessment:fetch': Get full details of an individual assessment
            'assessment:lodge': Lodge a new assessment with the register
            'assessment:search': Search the register for an assessment
            'address:search': List addresses that match a given search criteria, along with existing assessments
            'migrate:assessment': Migrate an assessment to the register
            'migrate:assessor': Migrate an assessor to the register
            'migrate:address': Migrate an address to the register
            'report:assessor:status': Get a report of changes to assessors status for a given date

  schemas:
    ## Addresses
    Address:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/AddressSource'
        line1:
          $ref: '#/components/schemas/AddressLine1'
        line2:
          type: string
          example: ''
        line3:
          type: string
          example: ''
        line4:
          type: string
          example: ''
        town:
          $ref: '#/components/schemas/AddressTown'
        postcode:
          $ref: '#/components/schemas/AddressPostcode'

    AddressBody:
      $ref: '#/components/schemas/Address'

    AddressDetail:
      allOf:
        - $ref: '#/components/schemas/Address'
        - type: object
          properties:
            addressId:
              $ref: '#/components/schemas/AddressId'
            existingAssessments:
              type: array
              items:
                type: object
                properties:
                  assessmentId:
                    $ref: '#/components/schemas/AssessmentId'
                  assessmentType:
                    $ref: '#/components/schemas/AssessmentType'

    AddressId:
      type: string
      example: 'UPRN-7163757'

    AddressLine1:
      type: string
      example: 2 Marsham Street

    AddressTown:
      type: string
      example: London

    AddressPostcode:
      type: string
      example: SW1P 4JA

    AddressSource:
      type: string
      enum:
        - GAZETTEER
        - PREVIOUS_CERTIFICATE
      example: GAZETTEER

    AddressSearchResults:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AddressDetail'

    # Assessors
    Assessor:
      type: object
      properties:
        firstName:
          type: string
          example: Jo
        lastName:
          type: string
          example: Bloggs
        middleNames:
          type: string
          example: T
        contactDetails:
          type: object
          properties:
            telephoneNumber:
              type: string
              maxLength: 256
              example: 01632 960375
            email:
              type: string
              format: email
              example: j.t.bloggs@example.com
        qualifications:
          $ref: '#/components/schemas/AssessorQualifications'

    AssessorBody:
      allOf:
        - $ref: '#/components/schemas/Assessor'
        - type: object
          properties:
            dateOfBirth:
              type: string
              format: date
              example: '1980-01-10'
            searchResultsComparisonPostcode:
              $ref: '#/components/schemas/AddressPostcode'

    AssessorDetail:
      allOf:
        - $ref: '#/components/schemas/Assessor'
        - type: object
          properties:
            assessorSchemeId:
              $ref: '#/components/schemas/AssessorSchemeId'
            registeredBy:
              $ref: '#/components/schemas/Scheme'

    AssessorSearchResults:
      type: object
      properties:
        data:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/AssessorDetail'

    AssessorSearchByPostcodeResults:
      allOf:
        - $ref: '#/components/schemas/AssessorSearchResults'
        - type: object
          properties:
            data:
              type: array
              items:
                type: object
                properties:
                  distanceFromPostcodeInMiles:
                    type: number
                    example: 0.2

    AssessorSchemeId:
      type: string
      example: TEST000001

    AssessorQualifications:
      type: object
      properties:
        domesticEnergyPerformanceCertificates:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticEnergyPerformanceCertificates:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        displayEnergyCertificates:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        airConditioningInspectionReports:
          $ref: '#/components/schemas/AssessorQualificationStatus'

    AssessorQualificationStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - STRUCKOFF
        - SUSPENDED
        - UNREGISTERED
      example: ACTIVE

    AssessorQualificationChangeEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/AssessorDetail'
      properties:
        qualificationChange:
          type: object
          properties:
            qualificationType:
              type: string
              example: domesticEnergyPerformanceCertificates
            previousStatus:
              $ref: '#/components/schemas/AssessorQualificationStatus'
            newStatus:
              allOf:
                - $ref: '#/components/schemas/AssessorQualificationStatus'
                - example: 'STRUCKOFF'

    AssessorFullName:
      type: string
      example: Jo Bloggs

    # Assessments
    AssessmentId:
      type: string
      example: 0000-0000-0000-0000-0000

    AssessmentType:
      type: string
      example: DOMESTIC_EPC
      enum:
        - DOMESTIC_EPC
        - NON_DOMESTIC_EPC

    # Schemes
    Scheme:
      allOf:
        - $ref: '#/components/schemas/SchemeBody'
        - type: object
          properties:
            schemeId:
              type: string
              example: 432

    SchemeBody:
      type: object
      properties:
        name:
          type: string
          example: EPCs 4 U

    Empty:
      type: object

  links: {}
  callbacks: {}
security: []
